// Example of a "relay" - a client and server.
// Uses the old favourite Hello World as a basis.

module ClientAndServer {
	
	struct Image{
	string time;
	string  date;
	string status;
	};
	
	interface Client{
	void switchOn(in string camID);
	void switchOff(in string camID);
	void sendPanicMessage(in string camID);
	void sendOkayMessage(in string camID);
	void setCamServer(in string camID);
	void resetCamStatus();
	Image currentImage();
	void getCameraStatus(in string camID);
	};
	
	interface ClientSensor{
	void sendSensorPanicMessage(in string sensorID);
	};

	struct HomeHubObject{
	string camID;
	string name;
	};
	
	typedef sequence <HomeHubObject> homeHubList;
	
    interface Relay {
    readonly attribute homeHubList hHist; 
    string switchOn(in string camID);
    string switchOff(in string camID);
    string fetch_message();
    void sendSensorPanicMessage(in string sensorID);
	string sendPanicMessage(in string camID);
	void sendOkayMessage(in string camID);
	string notifyServer(in string camID);
	void setConnection(in string name);
	void resetCamera(in string c);
	string setCamConnection(in string name);
	void addHomeHub(in string homeHubName);
	void getCameraStatus(in string camID);
	void sendCameraStatus(in string camID, in string status);
    };

    interface HelloWorld {
	string hello_world();
	string panicServer(in string camID);
	void sensorPanicServer(in string sensorID);
	string switchOn(in string camID);
	string switchOff(in string camID);
	void showCamStatus(in string messageStatus);
	void showSensorStatus(in string messageStatus);
	string connection(in string name);
	void resetSensor(in string CamID, in string homeHubName);
	void showOkayMessage(in string camID, in string homeHubName);
	void getStatus(in string camID, in string homeHubName);
	void showCameraStatus(in string camID, in string status);
    };			
};
