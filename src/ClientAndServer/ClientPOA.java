package ClientAndServer;


/**
* ClientAndServer/ClientPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Relay.idl
* Sunday, 26 March 2017 14:54:51 o'clock BST
*/

public abstract class ClientPOA extends org.omg.PortableServer.Servant
 implements ClientAndServer.ClientOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("switchOn", new java.lang.Integer (0));
    _methods.put ("switchOff", new java.lang.Integer (1));
    _methods.put ("sendPanicMessage", new java.lang.Integer (2));
    _methods.put ("sendOkayMessage", new java.lang.Integer (3));
    _methods.put ("setCamServer", new java.lang.Integer (4));
    _methods.put ("resetCamStatus", new java.lang.Integer (5));
    _methods.put ("currentImage", new java.lang.Integer (6));
    _methods.put ("getCameraStatus", new java.lang.Integer (7));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // ClientAndServer/Client/switchOn
       {
         String camID = in.read_string ();
         this.switchOn (camID);
         out = $rh.createReply();
         break;
       }

       case 1:  // ClientAndServer/Client/switchOff
       {
         String camID = in.read_string ();
         this.switchOff (camID);
         out = $rh.createReply();
         break;
       }

       case 2:  // ClientAndServer/Client/sendPanicMessage
       {
         String camID = in.read_string ();
         this.sendPanicMessage (camID);
         out = $rh.createReply();
         break;
       }

       case 3:  // ClientAndServer/Client/sendOkayMessage
       {
         String camID = in.read_string ();
         this.sendOkayMessage (camID);
         out = $rh.createReply();
         break;
       }

       case 4:  // ClientAndServer/Client/setCamServer
       {
         String camID = in.read_string ();
         this.setCamServer (camID);
         out = $rh.createReply();
         break;
       }

       case 5:  // ClientAndServer/Client/resetCamStatus
       {
         this.resetCamStatus ();
         out = $rh.createReply();
         break;
       }

       case 6:  // ClientAndServer/Client/currentImage
       {
         ClientAndServer.Image $result = null;
         $result = this.currentImage ();
         out = $rh.createReply();
         ClientAndServer.ImageHelper.write (out, $result);
         break;
       }

       case 7:  // ClientAndServer/Client/getCameraStatus
       {
         String camID = in.read_string ();
         this.getCameraStatus (camID);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ClientAndServer/Client:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Client _this() 
  {
    return ClientHelper.narrow(
    super._this_object());
  }

  public Client _this(org.omg.CORBA.ORB orb) 
  {
    return ClientHelper.narrow(
    super._this_object(orb));
  }


} // class ClientPOA
